OUT_FOLDER := out
EXECUTABLE_NAME := release
UNIT_NAME := unit_tests
FUNC_NAME := func_tests
FUNC_FOLDER := func_data
PIC_FOLDER := pics
COPY := cp

PHONY: run clean release format checkall unit func saveolds report-functesting-latest.txt report-unittesting-latest.txt

clean:
	rm -rf $(OUT_FOLDER)/$(EXECUTABLE_NAME).exe
	rm -rf $(OUT_FOLDER)/$(UNIT_NAME).exe
	rm -rf $(OUT_FOLDER)/$(FUNC_NAME).exe
	rm -f default.profraw default.profdata
	if [ -f Makefile ]; then \
    	make clean; \
		rm Makefile; \
	fi
	rm -f $(FUNC_FOLDER)/$(PIC_FOLDER)/*.png
	if [ -f target_wrapper.sh ]; then \
		rm -f target_wrapper.sh; \
	fi
	if [ -f report-functesting-latest.txt ]; then \
		rm -f report-functesting-latest.txt; \
	fi
	if [ -f report-unittesting-latest.txt ]; then \
		rm -f report-unittesting-latest.txt; \
	fi

release: lab_10.pro
	qmake lab_10.pro
	make

run: release
	./$(OUT_FOLDER)/$(EXECUTABLE_NAME).exe

format: 
	clang-format -style=file -i src/*.cpp inc/*.cpp unit_tests/*.cpp #*.{cpp,h}

checkall:
	@lizard > lizard.txt
	@cppcheck . --enable=all --library=qt &> cppcheck.txt
	$(info Created files: lizard.txt, cppcheck.txt)

unit: unit_tests.pro
	qmake unit_tests.pro
	make

func: func_tests.pro
	qmake func_tests.pro
	make

report-unittesting-latest.txt: unit
	./coverage.sh > report-unittesting-latest.txt

report-functesting-latest.txt: func
	./func_coverage.sh > report-functesting-latest.txt

saveolds:
	@[ -f ./report-unittesting-latest.txt ] && cp report-unittesting-latest.txt report-unittesting-old.txt || true
	@[ -f ./report-functesting-latest.txt ] && cp report-functesting-latest.txt report-functesting-old.txt || true
